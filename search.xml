<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[软路由CPU]]></title>
    <url>%2F2018%2F09%2F19%2F%E8%BD%AF%E8%B7%AF%E7%94%B1CPU%2F</url>
    <content type="text"><![CDATA[软路由CPU]]></content>
      <tags>
        <tag>软路由</tag>
        <tag>NAS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下使用Aria2]]></title>
    <url>%2F2018%2F09%2F12%2FMac%E4%B8%8B%E4%BD%BF%E7%94%A8Aria2%2F</url>
    <content type="text"><![CDATA[Mac下使用Aria2参考教程 Slark 张不二01 安装教程 如果没有安装homebrew，则使用下列命令安装 1# ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 使用 brew 安装 aria2 1# brew install aria2 配置aria2 创建.aria2文件夹，和aria2.conf配置文件 12345# cd ~# mkdir .aria2# cd .aria2# touch aria2.conf# touch aria2.session 12345* 修改配置文件 ```shell # vim aria2.conf 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#用户名#rpc-user=user#密码#rpc-passwd=passwd#上面的认证方式不建议使用,建议使用下面的token方式#设置加密的密钥#rpc-secret=token#允许rpcenable-rpc=true#允许所有来源, web界面跨域权限需要rpc-allow-origin-all=true#允许外部访问，false的话只监听本地端口rpc-listen-all=true#RPC端口, 仅当默认端口被占用时修改#rpc-listen-port=6800# 最大同时下载数(任务数), 路由建议值: 3max-concurrent-downloads=5# 断点续传continue=true#同服务器连接数max-connection-per-server=5# 最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要min-split-size=10M# 单文件最大线程数, 路由建议值: 5split=10# 下载速度限制max-overall-download-limit=0# 单文件速度限制max-download-limit=0# 上传速度限制max-overall-upload-limit=0# 单文件速度限制max-upload-limit=0# 断开速度过慢的连接#lowest-speed-limit=0# 验证用，需要1.16.1之后的release版本#referer=*## 文件相关# 文件保存路径, 默认为当前启动位置dir=/User/ding/Downloads/Aria2# 从会话文件中读取下载任务input-file=/Users/ding/Documents/Aria2/aria2.session# 在 Aria2 退出时保存 错误/未完成 的下载任务到会话文件save-session=/Users/ding/Documents/Aria2/aria2.session# 定时保存会话, 0 为退出时才保存, 需 1.16.1 以上版本, 默认:0save-session-interval=180#文件缓存, 使用内置的文件缓存#disk-cache=0# 另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)#enable-mmap=true# 文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长# 所需时间 none &lt; falloc ? trunc &lt;&lt; prealloc, falloc和trunc需要文件系统和内核支 file-allocation=prealloc 设置开机启动 编写开机脚本 123456789# vim aria2.sh// 添加下列内容#!/bin/sh# Aria2 RPC #aria2c --conf-path="/Users/ding/.aria2/aria2.conf" -D exit 更改权限 1# chmod +x aria2.sh 添加到开机自启 系统偏好设置 -&gt; 用户与群组 -&gt; 登陆项 中把脚本添加进来并勾选隐藏 Chrome浏览器的Aria2插件 Camtd - Aria2 BaiduExporter 迅雷离线助手]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人简历]]></title>
    <url>%2F2018%2F09%2F09%2F%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装iTerm2及oh-my-zsh]]></title>
    <url>%2F2018%2F09%2F07%2F%E5%AE%89%E8%A3%85iTerm2%E5%8F%8Aoh-my-zsh%2F</url>
    <content type="text"><![CDATA[安装iTerm2及oh-my-zsh 参考文档：WenBo丨星空灬 安装 iTerm2 安装powerline 12345678// 没有安装pip先安装pip# sudo easy_install pip// 之后安装powerline（这里可能会报错，可以参考问题解决）# pip install powerline-status// 若报错则执行下列命令# pip install powerline-status --user -U 安装oh-my-zsh 1# curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh 安装字体库fonts 123456// 克隆字体库到本地# git clone https://github.com/powerline/fonts.git// 安装字体# cd fonts# ./install.sh 安装成功后输出： 123➜ fonts git:(master) ./install.shCopying fonts...Powerline fonts installed to /Users/WENBO/Library/Fonts 导入配色 下载solarized：# git clone https://github.com/altercation/solarized 进入solarized/iterm2-colors-solarized 文件夹，双击Solarized Dark.itermcolors和Solarized Light.itermcolors进行安装导入 安装后进入iTerm状态栏 Profiles-&gt; Open Profiles -&gt; Edit Profiles -&gt; Color-&gt;Color Presets -&gt; 选择Solarized Dark主题 使用主题agnoster 下载主题 123456// 克隆主题到本地# git clone https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor// 安装主题# cd oh-my-zsh-agnoster-fcamblor# ./install 编辑~/.zshrc文件，将ZSH_THEME的值改为agnoster 添加指令高亮效果：zsh-syntax-highlighting 123456// 克隆项目到本地# git clone git://github.com/zsh-users/zsh-syntax-highlighting.git// 编辑.zshrc文件，在最后添加如下内容source /Users/ding/zsh-syntax-highlighting/zsh-syntax-highlighting.zshplugins=(zsh-syntax-highlighting) 解决oh-my-zsh对于.bash_profile自定义的配置失效问题 修改 oh-my-zsh 的配置文件.zshrc 1234# vim ~/.zshrc// 在最后添加配置source ~/.bash_profile 终端执行：# source ~/.zshrc 解决 oh-my-zsh 的socks5代理问题 设置代理 123456789101112131415161718// 编辑配置文件# vim ~/.zshrc// 添加配置alias proxy='export all_proxy=socks5://127.0.0.1:1086'alias unproxy='unset all_proxy'// 另一种带提示的配置proxy () &#123; export http_proxy="http://127.0.0.1:1086" export https_proxy="http://127.0.0.1:1086" echo "HTTP Proxy on"&#125;noproxy () &#123; unset http_proxy unset https_proxy echo "HTTP Proxy off"&#125; 保存退出并重新加载资源：# sourse ~/.zshrc 验证ip 1234// 二者皆可# curl ip.cn# curl cip.cc iTerm2快捷键 | 说明 | 快捷键 | | :----------------: | :-----------------------------------------------: | | 新建标签 | command + t | | 关闭标签 | command + w | | 切换标签 | command + 数字/左右 | | 切换全屏 | command + enter | | 查找 | command + f | | 垂直分屏 | command + d | | 水平分屏 | command + shift + d | | 切换屏幕 | command + option + 方向键 command + [ 或 command + ] | | 查看历史命令 | command + ; | | 查看剪切板历史 | command + shift + h | | 清除当前行 | ctrl + u | | 到行首 | ctrl + a | | 到行尾 | ctrl + e | | 前进后退 | ctrl + f/b (相当于左右方向键) | | 上一条命令 | ctrl + p | | 搜索命令历史 | ctrl + r | | 删除当前光标的字符 | ctrl + d | | 删除光标之前的字符 | ctrl + h | | 删除光标之前的单词 | ctrl + w | | 删除到文本末尾 | ctrl + k | | 交换光标处文本 | ctrl + t | | 清屏1 | command + r | | 清屏2 | ctrl + l |]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JetBrains系列软件激活]]></title>
    <url>%2F2018%2F09%2F05%2FJetBrains%E7%B3%BB%E5%88%97%E8%BD%AF%E4%BB%B6%E6%BF%80%E6%B4%BB%2F</url>
    <content type="text"><![CDATA[JetBrains系列软件激活及汉化 激活 参考：落魂之殇 和 小七 下载补丁包：&lt;http://idea.lanyus.com/jar/JetbrainsCrack-2.9-release-enc.jar&gt; VS Code打开 Finder -&gt; 应用程序 -&gt; JetBrains软件 -&gt; bin -&gt; .vmoptions后缀文件 在打开的文件最后加入一行 1-javaagent:/Users/ding/Downloads/JetbrainsCrack-3.1-release-enc.jar 启动JetBrains程序，选择激活码激活，填入以下配置 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647ThisCrackLicenseId-&#123; “licenseId”:”ThisCrackLicenseId”, “licenseeName”:”idea”, “assigneeName”:”“, “assigneeEmail”:”idea@163.com”, “licenseRestriction”:”For This Crack, Only Test! Please support genuine!!!”, “checkConcurrentUse”:false, “products”:[ &#123;“code”:”II”,”paidUpTo”:”2099-12-31”&#125;, &#123;“code”:”DM”,”paidUpTo”:”2099-12-31”&#125;, &#123;“code”:”AC”,”paidUpTo”:”2099-12-31”&#125;, &#123;“code”:”RS0”,”paidUpTo”:”2099-12-31”&#125;, &#123;“code”:”WS”,”paidUpTo”:”2099-12-31”&#125;, &#123;“code”:”DPN”,”paidUpTo”:”2099-12-31”&#125;, &#123;“code”:”RC”,”paidUpTo”:”2099-12-31”&#125;, &#123;“code”:”PS”,”paidUpTo”:”2099-12-31”&#125;, &#123;“code”:”DC”,”paidUpTo”:”2099-12-31”&#125;, &#123;“code”:”RM”,”paidUpTo”:”2099-12-31”&#125;, &#123;“code”:”CL”,”paidUpTo”:”2099-12-31”&#125;, &#123;“code”:”PC”,”paidUpTo”:”2099-12-31”&#125; ], “hash”:”2911276/0”, “gracePeriodDays”:7, “autoProlongated”:false&#125; 汉化 参考：cyzy_jin 下载汉化包：https://github.com/ewen0930/PyCharm-Chinese 注：汉化包在releases里面 把压缩包里的resources_zh_CN.jar拷贝到PyCharm安装目录下的lib目录，重启即可]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下更新Python至Python3.7.0]]></title>
    <url>%2F2018%2F09%2F05%2FMac%E4%B8%8B%E6%9B%B4%E6%96%B0Python%E8%87%B3Python3.7.0%2F</url>
    <content type="text"><![CDATA[Mac下更新Python至Python3.7.0前言： 因Mac自带的Python版本为Python2.7.10，但Python2几乎要淘汰了，所以更新到Python3.7.0版本。 所需环境 已安装Homebrew 更新步骤 从Homebrew安装Python，默认安装最新版 1# brew install python 设置别名 1234567打开 .bash_profile 文件# vim ~/.bash_profile添加别名，可用 which 查询python和python3的安装路径alias python2="/usr/bin/python"alias python3="/usr/local/bin/python3"alias python=python3 使修改后的设置生效 1# source ~/.bash_profile 测试Python的版本 12# pyhton -V 或 # python -version]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络系统集成]]></title>
    <url>%2F2018%2F08%2F31%2F%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[运维笔记 运维常用命令了解 Linux命令详解：man.linuxde.net/命令名 ifconfig 查看网络地址：# ifconfig 网卡配置文件：/etc/sysconfig/network-scripts/ifcfg-eth0 网卡配置详细内容 12345678910111213141516171819202122232425262728293031DEVICE=eth0 网卡的名字HWADDR=00:0c:29:90:89:d9 HWADDR HardWare Address 硬件地址 MAC地址TYPE=Ethernet 网络类型 以太网UUID=ae779ae6-044d-43d5-a33b-48c89e8de10e #UUID 做到系统中独一无二。ONBOOT=yes BOOT ON ? 在开机或重启网卡的时候是否启动网卡NM_CONTROLLED=yes 是否受network程序管理BOOTPROTO=none 网卡是如何获取到ip地址 网卡获取ip地址的方式 a. dhcp 自动获取ip地址 b. none 固定的ip地址 c. static 固定的ip地址IPADDR=10.0.0.100 IPADDR ip地址NETMASK=255.255.255.0 子网掩码 决定这个局域网中最多有多少台机器GATEWAY=10.0.0.2 网关 整个大楼的大门USERCTL=no 普通用户是否能控制网卡/etc/resolv.conf 配置DNS 网卡配置文件的DNS优先于/etc/resolv.confDNS 域名解析器 阿里的域名解析器：223.5.5.5 223.6.6.6 重启网卡：# /etc/init.d/network restart nameserver 配置DNS服务器：# nameserver 8.8.8.8 du 显示文件的大小：# du -h 文件路径 -h：以易读的方式显示 ps -ef 当前系统的进程状态：# ps -ef 选项 12-e：显示所有程序，与‘A’效果相同-f：显示UID,PPIP,C与STIME栏位。 搭配 grep 可以过滤所需要查看的进程：# ps -ef | grep vim 搭配 kill 可结束进程：kill PID/进程名 top 实时查看系统的运行情况：# top 可按c、m等键按照CPU、Memory排序 按q退出 df -th 显示磁盘分区上可使用的磁盘空间：# df -th 选项 12-t (--type)仅显示指定文件系统类型的磁盘信息-h 以可读性较高的方式显示 mount 加载文件系统到指定的加载点：# mount /dev/cdrom /mnt/cdrom /dev 目录下存放了外部设备 /mnt 目录下可用于挂载外部设备 tar 归档，压缩，解压缩等 选项： 1234567-x 解压缩文件-c 创建压缩文件(create)-z gzip-j bzip2-v 显示过程-t 查看压缩包内文件-f (file)必备选项 查看.tar.gz文件：# tar -ztvf log.tar.gz 解压.tar.gz文件：# tar -zxvf /opt/soft/test/log.tar.gz 将文件打包： 123# tar -cvf log.tar log2012.log 仅打包，不压缩，最后一列是操作对象，也即是要打包的文件# tar -zcvf log.tar.gz log2012.log 打包后，以 gzip 压缩 # tar -jcvf log.tar.bz2 log2012.log 打包后，以 bzip2 压缩 rpm 从rpm软件包安装软件：# rpm -ivh 软件包路径 列出所安装的rpm软件：# rpm -qa 一个rpm包中的文件安装到那里去了：rpm -ql rpm包名 NTP 时间服务器的配置 可参考：火之晨曦 安装NTP服务 1# yum install ntp ntpdate 修改配置文件 1# vim /etc/ntp.conf 把下列配置替换原有配置文件 12345678910driftfile /var/lib/ntp/driftrestrict default kod nomodify notrap nopeer noqueryrestrict -6 default kod nomodify notrap nopeer noqueryrestrict 127.0.0.1restrict -6 ::1server 127.127.1.0 #local clockserver pool.ntp.org #local clockfudge 127.127.1.0 stratum 10includefile /etc/ntp/crypto/pwkeys /etc/ntp/keys 查看NTP服务器 1# ntpq -p DHCP 服务器 可参考： 安装DHCP服务 1# yum install dhcp dhcp-devel -y 修改配置文件 1# vim /etc/dhcp.conf 配置： 1 Samba 服务器 可参考：一如莱戈、 安装samba服务 1# yum install -y samba 安装成功后，系统会生成服务的配置文件和一些命令工具 /etc/samba/smb.conf //是samba服务的主配置文件 /etc/init.d/smb //是samba的启动/关闭文件 查看开机启动情况：# service smb status 启动服务：# service smb start 设置开机启动： 12# chkconfig --level 35 smb on // 设置开机启动# chkconfig --list smb 、、 查看0-6的状态，smb服务启动或关闭 配置 1234567891011121314151617# vim /etc/samba/smb.conf配置：[global] //设置samba服务整体环境workgroup = WORKGROUP //设置工作组名称server string = Samba Server Version %v //服务器说明[dingLinux] //共享目录的名称comment = Public stuff //注释说明 path = /usr/local/laig //共享目录的路径public = yes //是yes/否no公开共享，若为否则进行身份验证(只有当security = share 时此项才起作用)writeable = yes //是yes/否no不以只读方式共享当与read only发生冲突时，无视read onlybrowseable = yes //是yes/否no在浏览资源中显示共享目录，若为否则必须指定共享路径才能存取guest ok = yes //是yes/否no公开共享，若为否则进行身份验证(只有当security = share 时此项才起作用) 注意 防火墙要关闭： # service iptables stop selinux要设置成disabled，路径是：/etc/sysconfig/selinux 注意共享目录的权限设置 要设置成不需要用户名密码直接访问，需要修改配置文件，将security设置成security = share 修改配置后要重启服务：# service smb restart 访问共享文件夹 在windows中打开文件资源管理器输入 \\192.168.1.194 进行访问，ip地址根据自己的服务器地址来输入 Apache服务器安装]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下终端走代理]]></title>
    <url>%2F2018%2F08%2F23%2FMac%E4%B8%8B%E7%BB%88%E7%AB%AF%E8%B5%B0%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[Mac下终端走代理 参考教程fazero 当前终端走代理 在终端输入下列内容： 1export http_proxy=http://127.0.0.1:1080 address和port替换为代理程序相应的地址好端口 在shell配置文件 .bashrc 或者 .zshrc 中设置 直接在 .bashrc 或者 .zshrc 添加下面内容，地址与端口根据自己的代理程序修改 12export http_proxy="http://127.0.0.1:1080"export https_proxy="http://127.0.0.1:1080" 保存并在终端执行：source ~/.bashrc ，此方法永久有效]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac的QuickLook安装插件]]></title>
    <url>%2F2018%2F08%2F23%2FMac%E7%9A%84QuickLook%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[QuickLook安装插件 参考博客越前君crazy一笑 安装Homebrew 终端输入： 1$ /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 若要卸载在终端把刚才的安装代码最后的install改为 uninstall 即可 安装QuickLook插件 安装QLColorCode 1homebrew cask install qlcolorcode 功能：预览代码语法高亮，（同时需要安装Highlight库，命令：brew install highlight） 安装qlImageSize 1homebrew cask install qlimagesize 功能：预览图片，同时显示图像大小和分辨率 安装QLMarkdown 1homebrew cask install QLMarkdown 功能：预览Markdown文件 安装QuickLookJSON 1brew cask install quicklook-json 功能：预览格式化的 JSON 文件 安装QLStephen 1brew cask install qlstephen 功能：预览无扩展名的纯文本文件 安装BetterZipQL 1brew cask install betterzipql 功能：预览Zip压缩文件的信息和目录 安装QLVideo 1brew cask install qlvideo 功能：预览 .mkv 等非原生支持的视频格式]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac 终端设置]]></title>
    <url>%2F2018%2F08%2F22%2FMac-%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Mac终端设置参考博客吾行者无疆 教程 复制一份vim配置模板到个人目录下 1cp /usr/share/vim/vimrc ~/.vimrc 在配置文件中添加所需配置 添加语法高亮和行号 12syntax onset nu! 保存退出并验证]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客从Windows迁移到Mac]]></title>
    <url>%2F2018%2F08%2F17%2FHexo%E5%8D%9A%E5%AE%A2%E4%BB%8EWindows%E8%BF%81%E7%A7%BB%E5%88%B0Mac%2F</url>
    <content type="text"><![CDATA[Hexo博客从Windows迁移到Mac 参考博客Gjincai 基本思路 在Mac上安装好Hexo，初始化并生成博客目录 生成新的SSH并添加到Github 将旧博客覆盖新的博客 具体实现 安装Node、git、和 Hexo(使用homebrew安装) 安装 Node：brew install node 安装 git：brew install git 安装 Hexo：npm install hexo-cli -g 生成 SSH key 并添加到 Github 检查是否存在SSH key：cd ~/.ssh 生成 SSH key , “ “中为GitHub绑定邮箱 1ssh-keygen -t rsa -C "xxxx@xxxx.com" 添加 SSH key 至 GitHub GitHub 页面中：Settings -&gt; SSH and GPG keys, 点击 New SSH key, 输入内容并保存。 保存后悔向你的邮箱发送一个验证链接，点击验证即可。 测试一下是否成功 1ssh git@github.com 部署博客，测试是否成功 把旧博客迁移到Mac中 复制旧博客所有内容，覆盖到新博客文件夹 部署博客，测试是否成功 12hexo cleanhexo d -g]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac常用软件]]></title>
    <url>%2F2018%2F08%2F17%2FMac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[Mac 常用软件 软件下载网址 MacX Xclient 必备工具软件 MacX iStat Menus iStatistica MacClean Downie Folx Dr.Cleaner Pro Dr.Unarchiver Tuxera NTFS Dash Alfred Clover Configurator MaciASL App Store 网易云音乐 QQ WeChat Xcode Telegram Xmind 网页下载 Chrome Rime - 鼠须管 V2RayX ShadowsocksX-NG-R8 BaiduPCS-GO Typora VS Code QQ助手 微信助手 终端工具 homebrew 1/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" Oh-My-Zsh 安装Aria2 https://www.jianshu.com/p/1290f8e7b326 https://www.jianshu.com/p/e9885c658e2c https://yalv.me/aria2/ 优质Mac软件推荐贴 https://www.cnblogs.com/ae6623/p/8556658.html https://wsgzao.github.io/post/mac/]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VMWare 14 安装MacOS X 10.11.md]]></title>
    <url>%2F2018%2F08%2F10%2FVMWare-14-%E5%AE%89%E8%A3%85MacOS-X-10-11-md%2F</url>
    <content type="text"><![CDATA[VMWare 14 安装MacOS X 10.11 前言因为需要Mac来调整一下plist文件。所以用虚拟机安装一下MacOS，本篇博客记录一下安装过程。 参考博客猫巷の博客 moTzxx 所需工具 虚拟机（VMWare Workstations Pro 14） Mac OS 镜像 Unlocker（虚拟机苹果破解补丁） darwin.iso文件（需放到 VMWare14 的安装文件下） OSX.vmx添加的配置：smc.version = &quot;0&quot; 关键步骤 Win+R打开运行框，输入services.msc，然后关闭VM的所有服务 解压Unlocker压缩包，找到win-install.cmd，然后右键以管理员身份运行 普通虚拟机安装过程安装Mac 安装遇到不可恢复错误则需修改客户机安装目录下的 OS X 10.11.VMX(客户机名.VMX) 文件，在 smc.present = “TRUE” 下添加下列行 1smc.version = "0" 安装是提示磁盘空间不足，需要到 实用工具-&gt;磁盘工具 格式化一次安装盘 安装VMWare Tools，若安装不上则需在虚拟机安装目录下添加 darwin.iso 文件，再将客户机的路径改到这个文件 安装好VMWare Tools可以设置一个共享文件夹，硬件设置里右边的选项，然后设置共享文件夹]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[系统引导修复]]></title>
    <url>%2F2018%2F08%2F04%2F%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D%2F</url>
    <content type="text"><![CDATA[前言这两天折腾双系统把Windows10的引导给折腾坏了，记录一下修复方法 系统引导修复 进入PE系统 新建一个分区，系统模式为ESP 记住ESP分区对应的盘符，未分配盘符的话可 用工具进行挂载 系统命令模式下，输入下列命令 1bcdboot c:\windows /s z: /f UEFI /l zh-cn 查看引导文件是否建立成功]]></content>
      <tags>
        <tag>Blog</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[希码学习]]></title>
    <url>%2F2018%2F07%2F25%2F%E5%B8%8C%E7%A0%81%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[最近想玩形码了，在二笔和希码之间犹豫了许久，最终选了希码 希码字跟图 键位 键位 字根 A 亽 目马五女 B 阝卩 了 子 C (框框)凵匚冂门コユ 囗四田罒皿 川卅 D 冫丷リ〃゛二〢(两点两横两竖两撇) E 丨├卜上，忄⺌心，(光头) F 壬  丢 (丿士、丿土，)，三日曰彐(虐底) G 厂广疒（厂内加一横）几 古 广 弓 十 H 艹廿廾井卌，耳且(具头)贝页 I 人 亻 J 丁扌才寸手 ，勹ㄋ亅乛 (青字头) K 口 (哭头彖头官脚，封闭性框内无笔划但可穿插) L 匕七弋戈戋(“戈”少一横)，乙乚∟ㄑ⺄ 来 王 M 山巾用也，木 礻衤 木 N 丆ナ大力九 ，月乃 O 文攵夂 夕(夕少丶) 竹饣(飠) 雨 P 尸(眉头)身，厶マ(印左少一，留左上) Q 金钅刀刃，(隹右，拜右) ，(隹去掉亻，拜去掉) 求 臼 R 丿(丿+二)气，禾 牜牛，乊爫爪 S — 、 T 土士干(二+丨)千，走足止(足底) 土 U 小少(“小”缺右点)，八入，宀 冖 ⺈ V 巴巳已己⺋，水氺氵(学字头)灬 W 丶乀亠 亡，火 X 纟糹幺，乂又ス Y 立(立下少一)，言 讠，业亦，覀(要)西酉，(“衣”字底、“艮”字底) Z 辶廴，豕豸犭(象尾) ; 耂方舟 石虫镸(“鸟”去一)刂儿]]></content>
      <tags>
        <tag>Blog</tag>
        <tag>输入法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux知识整理]]></title>
    <url>%2F2018%2F07%2F24%2FLinux%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[前言：整理巩固一下Linux的知识 Linux 简介 特点：多用户多任务、良好的兼容性、可移植性强、稳定性高、界面美观 版本：X.Y.Z 主版本号、次版本号(偶数是正式版本，奇数是测试版本不稳定)、修改次数 系统结构 | Linux系统结构 | | :————————————:| | 应用程序 | | 应用程序 X Window | | Shell层 | | 内核 | 1. Shell层：用户与内核之间的桥梁。 2. 内核：操作系统的核心，管理着整个计算机的软硬件资源。 3. 分区：至少要有两个分区 swap分区和 根分区。 4. 文件管理：ext4文件系统 5. 设备管理： * 字符设备：以字符为单位进行输入输出，CPU能直接进行读写。 打印机，扫描仪，声卡、显卡、鼠标、键盘等 * 块设备：以数据块为单位进行输入输出，CPU不能直接进行读写，要经过缓冲区。 硬盘、光盘、U盘 * 网络设备：以数据包进行数据交换。网卡 * 注：无论是哪类设备，Linux都统一当做文件来处理 命令命令提示符 [root@centos ~]# [ding@centos ~]$ 用户名、主机名、目录名、提示符 命令格式 命令名 [选项] [参数] 注销 exit Ctrl+D 重启 reboot shutdown -r now 注：-r的选项是reboot 关机 halt shutdown -h now 注：-h的选项是halt 查看时间：date 修改时间：date 184512302017 点数 月份 年 显示日历：cal 可加参数 [年份],查看全年日历 pwd 显示当前目绝对路径 cd 切换目录 ls -l 显示详细信息(文件类型、权限、所有者、组群、文件大小、修改时间、文件名) -a 显示所有文件和目录 cat 显示文本文件内容 -n 在内容前显示行号 more/less 文件 分屏显示文件(文件过长时，一屏幕一屏幕的显示) 按空格 显示下一屏， 按回车 显示下一行， 按q 退出more命令 tail [选项] 文件 显示文本结尾部分 -n 10 文件名 显示文件的倒数10行 head命令与tail相同 man 命令名 显示命令的手册页帮助信息，按q退出man 命令不懂找男人 命令名 --help 显示命令的帮助信息(非所有命令都有此选项) clear 清屏 wc [选项] 文件 按顺序显示： 行数 单词数 字符数 文件名 -c 显示文件的字符数 char -l 显示文件的行数 low -w 显示文件的单词数 word &gt; 输出重定向 &lt; 输入重定向 &gt;&gt; 附加输出重定向 错误重定向：结果显示在屏幕上，错误信息重定向到指定文件用 2&gt; 结果和错误信息都重定向到指定文件用 &amp;&gt; 创建f1文件： cat &gt;f1 进入输入界面，到文本的下一行按 Ctrl+D 结束输入 附加输出重定向： cat &gt;&gt;f1 在f1后追加内容 管道 | 前一个命令的执行结果是后一个命令的执行条件 ls | wc -l 统计当前目录下的文件和目录总数 history 5 查看最近执行的 5条命令 命令上限1000 !! 命令 再次执行上一条命令，!5 执行history中 5 对应的命令 别名：alias vi=&apos;vim&apos; vim编辑器命令模式：刚进入vi时的模式 文本模式：i 最后行模式：按 [shift和冒号] 进入 输入文本 [命令模式下] i/I a/A o/O 查找字符串 [命令模式下] /字符串 从头往下找，找到则停在字符串首字母上 ？字符串 从当前位置往下找，找到停在字符串首字母上 n 继续查找满足条件的字符串 N 改变查找方向，继续查找满足条件的字符串 撤销与重复 [命令模式下] u 撤销上一步操作 . 重复上一步操作 文本块操作 set nu 显示行号 set nonu 不显示行号 n1,n2 co n3 将 [n1,n2]行，复制到n3行之下 n1,n2 m n3 将 [n1,n2]行，移动到n3行之下 n1,n2 d 删除 [n1,n2]行 n1,n2 s/字符串1/字符串2/g 将[n1,n2]行中所有的 [字符串1] 用 [字符串2] 替换 保存与退出 [命令模式下] 连续按两次 z 保存并退出 [最后行模式下] :w 文件 保存为指定的文件 :q 退出，若文件有改动则提示 :q! 不保存直接退出 :wq 存盘并退出 :x 存盘并退出 运行级别 配置文件在 /etc/inittab 默认运行级别为 5 | 数字|模式 | |:-:|:——| | 0| 关机 | | 1| 单用户模式 | | 2| 多用户模式，不提供NFS | | 3| 完整的多用户模式，仅提供字符界面 | | 4| 保留的运行级别 | | 5| 完整的多用户模式，自动启动图形化用户界面 | | 6| 重新启动 | GNOME环境下：Ctrl+Alt+[F2-F6] 回到字符界面 字符界面下：按Alt+F1 回到 GNOME桌面 用户和群组超级用户：UID 0 所属组群 GID 0 系统用户 UID 1-499 所属组群 GID 1-499 普通用户 UID 500- 所属组群 GID 500 用户账号信息文件：/etc/passwd 文件内容：root:x:0:0:root:/root:/bin/bash 用户名 密码 UID GID 全名 主文件夹 用户密码信息文件：/etc/shadow 组群账号信息文件：/etc/group 文件内容：root:x:0: bin:x:1:bin,daemon 组群名 组群密码 组群管理员密码 以此组群为附加组群的用户列表 组群密码信息文件：/etc/gshadow 文件内容：root::: 加密密码字段为 !! bin:::bin,daemon 组群名 组群加密密码 组群管理员密码 以此组群为附加组群的用户列表 useradd 创建用户账号 超级用户才能使用 123456​ -c 全名 -d 主目录 -g 指定用户的主要组群 -G 指定用户的附加组群 -u 指定用户的UID -M 只创建用户，不创建主目录 passwd 设置或修改密码 以及 密码属性 1234​ -d 删除用户密码 -l 锁定用户 -u 解除锁定 -S 显示指定用户账号的状态 usermod [选项] 用户名 修改用户属性 超级用户才能使用 123456​ -c 全名 指定用户的全称 -d 主目录 指定用户的主目录 -g 指定用户的主要组群 -G 组群ID或组群名 指定用户的附加组群 -u 用户ID 指定用户的UID -l 用户名 指定用户的新名称 userdel 删除用户账号 超级用户才能使用 1​ -r 删除用户的账号和主目录，无此选项则保留主目录 su [-][用户名] 12切换用户, `-` 选项表示切换到用户的主目录 无用户名参数则切换到root用户 id [用户名] 查看用户的 UID、GID 和 用户所属组群 groupadd [选项] 组群名 新建组群，只有超级用户才能使用 1​ -g 组群id 指定组群的GID groupmod [选项] 组群名 新建组群，只有超级用户才能使用 12​ -g 组群id 指定组群的GID -n 组群名 指定组群的新名字 groupdel 组群名 删除组群，只有root用户才能使用 批量创建多个用户 创建 students 组群 ` # groupadd -g 600 students` 创建用户信息文件 使用文本编辑器编辑 /etc/passwd 编辑好后保存为students.txt student1:x:601:600::/home/student1:/bin/bash student2:x:602:600::/home/student2:/bin/bash 创建用户密码,保存为password.txt 123student1:123456student2:123456 批量创建用户账号 `# newusers &lt; students.txt ` 文件已经追加到 /etc/passwd ，系统已经在 /home 目录中为每位用户创建了主目录 暂时取消 shadow 加密 ` # pwunconv` 为用户设置密码 `# chpasswd &lt; passwd.txt ` 密码追加到了/etc/shadow 在passwd文件内能看到密码 恢复 shadow 加密 # pwconv 批量创建的用户，主目录中都缺少 .bash_profile 和 .bashrc 文件系统 挂载：将存储介质的内容映射到指定的目录，此目录为该设备的挂载点。一个挂载的点一次只能挂载一个设备 `/etc/fstab` 保存着文件系统 开机自动挂载信息 `/etc/mtab ` 保存着当前系统中 文件系统的挂载信息 文件分类：普通文件、目录文件、链接文件、设备文件 文件布局： | 目录 | 功能 | | :——–: | :————————————————— | | / | Linux目录结构的起点 | | bin | 存放可执行命令，如chmod、data | | boot | 存放系统启动时所需要的文件，包括内核和引导装载程序 | | dev | 存放所有的设备文件，如cdrom光盘文件 | | etc | 存放系统配置文件，如passwd、fstab | | home | 包含所有普通用户的主目录 | | lib | 包含系统二进制文件所需要的共享库 | | lost+found | 存放文件系统发生故障后无法归位的文件 | | media | 移动存储戒指的默认挂载点 | | mnt | 用于临时挂载文件系统 | | proc | 存放进程的运行信息，由内核在内存中产生 | | root | 超级用户的主目录 | | sbin | 存放系统管理命令，一般只有超级用户才能使用 | | selinux | 存放SELinux的相关文件 | | tmp | 存放公用的临时文件 | | usr | 存放应用程序及相关文件 | | vsr | 存放系统中经常变化的文件，如系统日志文件，用户邮件等 | 文件扩展名 系统文件 | 后缀 | 文件 | | :—: | :—- | |.rpm|RPM软件包文件| |.conf|系统配置文件| |.lock |锁定文件| 归档和压缩文件 | 后缀 | 文件 | | :—: | :—- | |.zip |zip压缩文件| |.tar |归档文件| |.gz |gzip命令产生的压缩文件| |.bz2 |bzip2命令产生的压缩文件| 程序和脚本文件 | 后缀 | 文件 | | :—: | :—- | |.c |C语言源程序代码文件| |.cpp | C++语言源程序代码文件| |.o |程序对象文件| |.so | 库文件| |.sh | Shell脚本文件| 4. 多媒体文件 | 后缀 | 文件 | | :---: | :---- | |.gif | gif图像文件| | .jpg | GPEG图像文件| |.png | png图像文件| |.htm或html| HTML超文本文件| |.wav| 音频波形文件| 权限 读取权限：r 、写入权限：w 、执行权限：x 字母表示法 - rwx rwx rwx 文件权限一共10个字符，中间无空格 第一个字符：文件类型。 | 字符 | 文件类型 | | :—: | :—- | | - | 普通文件 | | d | 目录文件 | | l | 连接文件 | | b | 块设备文件 | | c | 字符设备文件 | 后面每三个一组，分别表示 当前用户 u，用户所在的组 g，其他 o 数字表示法 | 权限 | 数字 | | :—: | :—-: | | r/读 | 4 | | w/写 | 2 | | x/执行 | 1 | 修改权限 chmod 数字模式 文件 chmod 755 file chmod 功能模式 文件 chmod g-w file 功能模式 对象： u 文件所有者 user g 同组用户 group o 其他用户 other 操作符: + 增加权限 - 删除权限 = 赋予权限 权限： r/读：4 w/写：2 x/执行：1 chgrp 组群 文件 ：改变文件所属组群 chown 文件所有者[:组群] 文件 ：改变文件所有者，并可一并修改文件的所属组群 # chown ding:ding f1 ：把文件f1的 所有者 和 组群 一并改为 ding 基础文件命令 创建目录 mkdir 123456mkdir [选项] 目录 -m 创建目录的同时设置目录的访问权限 -p 一次创建多级目录 例： mkdir -p ding/f rmdir -p ding/f 移动或重命名目录 mv 123456mv [选项] 源文件或目录 目标文件或目录 -b 若存在同名文件，则在覆盖之前备份原来的文件 -f 强制覆盖同名文件例： mv pict picture 改名 mv file ding/ 将file文件移动到ding目录 复制文件或目录 cp 1234cp [选项] 源文件或目录 目标文件或目录 -b 若存在同名文件，则在覆盖之前备份原来的文件 -f 强制覆盖同名文件 -r/-R 按递归方式，保留原目录结构复制文件 删除文件或目录 rm 123456rm [选项] 文件或目录 -f 强制删除，不需要确认 -r/-R 按递归方式删除目录 i 再次确认是否删除例： rm -rf /* 立链接文件，默认硬链接 ln 12345ln [选项] 目标文件 链接文件 -b 若存在同名，则覆盖前先备份 -s 建立符号链接文件例： ln -s /etc/passwd passwd.lnk 查找：find 查找文件/grep 查找内容 find 查找文件或目录 1234567891011find [路径] 表达式 从指定路径开始向下搜索满足表达式的文件和目录。不指定路径，则查找当前目录 -name 文件 按文件名查找，可使用通配符 locate 与 find -name相同 -group 组群名 查找文件所属组群为指定组群的文件 -user 用户名 查找文件所有者为指定用户的文件 -type 文件类型 按文件类型查找，d为目录文件，l为链接文件 -size [+|-]文件大小 查找指定大小的文件，+ 表示超过，-表示不足例： find -name f* 从当前目录查找 f 开头的文件 find /etc -name fs* find -type l find -size +100k grep 查找指定文件中的字符串 123456grep [选项] 字符串 文件列表 从指定文件中查找符合条件的字符串，默认显示字符串所在的行 -n 显示行号 -v 显示不包含指定字符串的行 -i 查找是不区分大小写例： grep -n root /etc/passwd 查找passwd中包含 root 的行，并显示行号 显示文件大小，默认以KB为单位 du du [选项] [目录或文件] -a 显示指定目录及所有子目录和文件的大小，默认只显示目录的大小 -h 以易读的方式显示目录或文件的大小，加上单位 -s 只显示指定目录的大小，而不显示子目录的大小 例： du -sh /home/ding 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118---## 归档和压缩 * tar [] 文件名 |命令|选项|功能| |:--:|:-:|:----| | tar|选项| 归档/压缩文件 文件或目录列表| | |-c | 创建归档文件| | |-t | 显示归档文件的内容 | | |-x | 还原归档文件中的目录 | | |-v | 显示归档命令的执行过程 | | |-z | 采用gzip方式压缩/解压缩归档文件 | | |-j | 采用bzip2方式压缩/解压缩归档文件| | |-f | tar命令必须的选项| 例： `tar -cf etc.tar /etc/*.conf` `tar -czf etc.tar.gz /etc/*.conf`* gzip [] 文件名 |命令|选项|功能| |:--:|:-:|:----| | gzip| |压缩或解压文件| | gzip|[选项]|文件或目录 | | | -d | 解压缩文件，相当于gunzip命令| | | -r | 参数为目录是，按目录结构递归压缩目录中的所有文件| | | -v | 显示文件的压缩比例| 例： `gzip 文件名` 压缩或解压缩格式为 .gz的文件。压缩完后会删除源文件 `gzip *` 压缩当前目录所有文件，没有归档功能，压缩多个文件时每个都是.gz压缩文件* bzip2 [] 文件名 |命令|选项|功能| |:--:|:-:|:----| | bzip2| |压缩或解压文件| |bzip2 |[选项]| 文件或目录| | | -d | 解压缩文件，相当于bunzip2命令| | | -v | 显示文件的压缩比例| 例： `bzip2 文件名` 压缩或解压缩格式为 .bz2的文件。压缩完后会删除源文件 `bzip2 *.bz2` 解压当前文件夹所有bz2文件`* `zip [选项] 压缩文件 文件列表` -m 压缩完后删除源文件 -r 地柜压缩 例： zip file.zip ** `unzip [选项] 压缩文件` 解压缩.zip文件 -l 查看压缩文件所包含的文件 -t 测试压缩文件是否已损坏 -d 目录名 指定解压缩的目标目录 -n 不覆盖同名文件 -o 强制覆盖同名文件 例： unzip -d dir file.zip 解压到dir目录---## RPM软件包 安装RPM软件包 rpm -i[选项] 软件包文件 -v 显示安装过程 -h 以 # 表示安装进度 -replacepkgs 重复安装软件包 查询RPM软件包 rpm -q[选项] 软件包 -l 查询已安装软件包所包含的所有文件 -i 查询已安装软件包的详细信息 -a 查询已安装的所有软件包 -f 文件名 查询指定文件所属的软件包 删除RPM软件包 rpm -e 软件包---## YUM命令管理软件包 安装软件包/软件包集 yum install 软件包名 yum groupinstall 软件包集名 安装vsftpd软件包 yum install vsftpd 查询软件包/软件包集信息 yum info 软件包名 yum groupinfo 软件包集名 查询vsftpd软件包的信息 yum info vsftpd 删除软件包/软件包集 yum remove 软件包名 删除RPM软件包 yum groupremove 软件包集名 删除RPM软件包集 yum remove vsftpd 删除vsftpd软件包---## 进程管理* 进程：是具有独立功能的程序的一次运行过程* 一个程序可启动多个进程，一个进程可调用多个程序* 进程的优先级的取值范围：-20~19* 进程的状态： ​ 就绪状态：进程已获得除CPU外的运行所需的全部资源 运行状态：进程占用CPU正在运行 等待状态：进程正在等待某一事件或某一资源 进程同步：相关进程为协作文成同一任务而引起的直接制约关系 进程互斥：进程间因竞争系统资源而引起的间接制约关系 进程死锁：对资源保持请求、对资源的循环等待、对资源的非抢占式分配、资源的独占使用 挂起状态：正在运行的进程，因为某个原因失去CPU而暂时停止运行、 终止状态：进程已结束 休眠状态：进程主动暂时停止运行 僵死状态：进程已停止运行，但是相关控制信息仍保留 1234567891011121314151617181920212223242526272829303132333435* 作业： 1. 概念 正在执行的一个或多个相关进程可形成一个作业 一个作业可启动多个进程 作业分前台作业和后台作业 2. Shell的命令的末尾加上一个 &amp; 符号，将启动一个后台作业```shell jobs [选项] 显示当前所有的作业 -p 仅显示作业号 -l 显示进程号和作业号 bg [作业号] 将前台作业切换到后台运行，若未指定作业号，则将当前作业切换到后台 fg [作业号] 将前台作业切换到前台运行，若未指定作业号，则将当前作业切换到前台 例： vi f1 编辑文件f1 Ctrl z 挂起vi jobs -l 显示进程号和作业号 bg 1 将作业切换到后台 Ctrl z 挂起vi fg 1 将作业再切换到前台 ps [选项] 显示进程的状态，无选项时显示当前用户在当前终端启动的进程 -a 显示当前终端上所有的进程 -A 显示系统所有进程，包括其他用户进程和系统进程 -l 显示进程的详细信息、包括父进程号、进程优先级等 u 显示包括进程的所有者在内的详细信息 x 显示后台进程的信息 -t 终端号 显示指定终端上的进程信息 pstree [选项] 以树形图显示进程之间的相互关系 -a 显示启动进程的命令行 -n 按照进程号进行排序 终止正在运行的进程，超级用户可终止所有进程，普通用户只能终止自己的进程 1234567891011kill % 作业号kill [选项] 进程号 选项填数字 HUP 1 终端断线 INT 2 中断（同 Ctrl + C） QUIT 3 退出（同 Ctrl + \） TERM 5 终止 KILL 9 强制终止 CONT 8 继续（与STOP相反， fg/bg命令） STOP 9 暂停（同 Ctrl + Z）例： kill -9 2638 强行终止2638进程 进程调度 at调度 1234567at [选项] [时间] -l 显示等待执行的调度作业 -d 删除指定的调度作业进程的执行时间可表示为：1.绝对计时法：HH:MM(24时制)、HH:MM(12时制加AM/PM) 日期写在时间后面，格式为：月日年例： at 23:59 01012018 at&gt;wall Happy New Year! 输入at调度后会出现 at&gt; 提示符， 输入完成后按 Ctrl D batch调度 12在系统空间时运行，适合时间上要求不高，但运行时占系统资源较多的工作 输入batch还是出现 at&gt; 提示符， 输入完成后按 Ctrl D cron调度 12at和batch调度的命令智能执行一次，cron调度能重复执行cron调度与crond进程、crontab命令和crontab配置文件有关 crontab配制文件 1234567保存在/var/spool/cron 目录中，文件名与用户名相同也即halen用户的crontab配置文件为/vwr/spool/crontab/helencrontab配置文件保留cron调度的内容，每行表示一个调度任务，每个调度任务包括六项字段 字段： 分钟 时 日期 月份 星期 命令 (倒着：星期，月日时分)取值范围： 0-59 0-23 01-31 01-12 0-6(0是星期天) "-"符号表示一段时间 ","符号表示指定时间，如5,15,25 "/"表示时间的间隔，如日期栏中输入 */3 表示每隔三天 1234crontab [选项] 管理crontab配置文件 -e 创建并编辑crontab配置文件 -l 显示crontab配置文件的内容 -r 删除crontab配置文件 crond 进程 1crond进程在系统启动时自动启动，并一直运行在后台，负责检测crontab配置文件，并按照其设置内容定期重复执行cron的调度工作 实施系统监视的Shell命令 12345678who [选项] 查看当前已登录的所有用户 -H 显示出信息标题行top [-d 秒数] 动态显示CPU利用率、内存利用率和考必过状态等相关信息，默认每5s更新显示信息。-d 秒数 可以指定更新间隔free [选项] 显示内存和交换分区的使用情况 -m 以MB为单位显示，默认以KB为单位 -t 增加显示内存和交换分区的总数和信息 思考题 (cron调度)(1) 下午4:50删除/abc 目录下的全部子目录和全部文件 50 16 * * * rm -rf /abc/* (2) 早8:00--下午6:00 每小时一次将/xyz 目录下 x1 文件的最后5行加入到/backup 目录下的 back01.txt 0 8-18 * * * tail -5 /xyz/x1 &gt;&gt; /backup/back01.txt (3) 每周一下午5:50将/data 目录下的所有目录和文件归档并压缩为文件 backup.tar.gz 50 17 * * 1 tar -czvf backup.tar.gz /data v是显示执行过程 f是必带选项 c是归档 z是gzip压缩]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu下使用Python的坑]]></title>
    <url>%2F2018%2F07%2F16%2FUbuntu%E4%B8%8B%E4%BF%AE%E6%94%B9Python%E7%89%88%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[前言学习Python，需要用Linux，这里说一下我我遇到的各种坑 Python版本更改参考文章：遥远的她 和 GitHub Issues 基于用户修改版本 查看所拥有的Python版本 1ls /usr/bin/python* 查看默认版本信息 1python --version 修改默认版本 1alias python='/usr/bin/python3.6' 查看是否修改成功 重新登录或重新加载.bashrc文件 1. ~/.bashrc 查看Python版本：参看上述第三步 VIM 下 Python 自动补全参考文章：niepangu和运维笔记和xpleaf 安装pydictin插件123456wget https://github.com/rkulla/pydiction/archive/master.zipunzip -q mastermv pydiction-master pydictionmkdir -p ~/.vim/tools/pydictioncp -r pydiction/after ~/.vimcp pydiction/complete-dict ~/.vim/tools/pydiction 创建~/.vimrc文件 1vim ~/.vimrc 添加配置 123filetype plugin onlet g:pydiction_location = '~/.vim/tools/pydiction/complete-dict'let g:pydiction_menu_height = 3 编辑.py文件，测试是否成功 使用SSH连接Ubuntu参考文章：rabbittinbee 网络连通 Windows下查看ip cmd下:ipconfig Ubuntu下：ifconfig windows下ping Ubuntu的ip，查看是否ping通 Ubuntu开启SSH 查看是否开启SSH 1ssh localhost 如果出现下面提示表明还没有安装 1ssh: connect to hostlocalhost port 22: Connection refused 开启SSH 1sudo apt-getinstall –y openssh-server Ubuntu安装fcitx使用小鹤双拼参考文章：点击这里 安装fcitx 123456789101112# 安装 fcitx-rime， 是 fcitx 社区维护的$ sudo apt-get install fcitx-rime# 安装双拼方案$ sudo apt-get insatll librime-data-double-pinyin# 配置 fcitx 为默认输入法，然后重新部署或者重启$ im-config$ sudo reboot # (如果已经装过 fcitx 就不需要重启啦，系统托盘 fcitx 图标右键重新启动即可)# 添加输入法$ fcitx-config-gtk3 # (一般安装好就有了，最好确认一下) 添加小鹤方案 添加配置文件：~/.config/fcitx/rime/default.custom.yaml 1234567891011121314151617181920212223patch: schema_list: - schema: luna_pinyin # 朙月拼音 - schema: luna_pinyin_simp # 朙月拼音 简化字模式 - schema: luna_pinyin_tw # 朙月拼音 臺灣正體模式 - schema: terra_pinyin # 地球拼音 dì qiú pīn yīn - schema: bopomofo # 注音 - schema: jyutping # 粵拼 - schema: cangjie5 # 倉頡五代 - schema: cangjie5_express # 倉頡 快打模式 - schema: quick5 # 速成 - schema: wubi86 # 五笔 86 - schema: wubi_pinyin # 五笔拼音混合輸入 - schema: double_pinyin # 自然碼雙拼 - schema: double_pinyin_mspy # 微軟雙拼 - schema: double_pinyin_abc # 智能 ABC 雙拼 - schema: double_pinyin_flypy # 小鶴雙拼 - schema: wugniu # 吳語上海話（新派） - schema: wugniu_lopha # 吳語上海話（老派） - schema: sampheng # 中古漢語三拼 - schema: zyenpheng # 中古漢語全拼 - schema: ipa_xsampa # X-SAMPA 國際音標 - schema: emoji # emoji 表情 VMNet0、VMNet1和VMNet8的区别 vmnet0，实际上就是一个虚拟的网桥，这个网桥有很若干个端口，一个端口用于连接你的Host，一个端口用于连接你的虚拟机，他们的位置是对等的，谁也不是谁的网关。所以在Bridged模式下，你可以让虚拟机成为一台和你的Host相同地位的机器。 vmnet1是host-only，也就是说，选择用vmnet1的话就相当于VMware给你提供了一个虚拟交换机，仅将虚拟机和真实系统连上了，虚拟机可以与真实系统相互共享文件，但是虚拟机无法访问外部互联； vmnet8是NAT，就是网络地址转换，相当于给你一个虚拟交换机，将虚拟机和真实系统连上去了，同时这台虚拟交换机又和外部互联网相连，这样虚拟机和真是系统可以相互共享，同时又都能访问外部互联网，而且虚拟机是借用真实系统的IP上网的，不会受到IP-MAC绑定的限制。 注意：很多人把VMnet8在宿主机比作虚拟机的路由器，这个是不对的，如果比作路由器的话，那么，虚拟机若想上网，必须把虚拟机上面的IP地址和宿主机VMnet8的ip地址相同才可以，如果那样就没有意义了，显然是不对的。所以，我们把宿主机VMnet8比作：“一个交换机，同时和外部互联网相连”。 VS Code 编辑 Python乱码问题参考文章：zhaoshizi 首选项中把code-runner.executorMap设置为&quot;python&quot;:&quot;set PYTHONIOENCODING=utf-8 &amp;&amp; python&quot;完美解决 配置教程参考文章：浪晋 VIM下按 Ctrl+s 后假死的解决方法Ctrl+q 退出假死 使用vim时，如果你不小心按了 Ctrl + s后，你会发现不能输入任何东西了，像死掉了一般，其实vim并没有死掉，这时vim只是停止向终端输出而已，要想退出这种状态，只需按Ctrl + q 即可恢复正常。 持续更新中。。。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[双拼输入法]]></title>
    <url>%2F2018%2F07%2F09%2F%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95%2F</url>
    <content type="text"><![CDATA[前言 对于有码字需求的用户来说，可能早已经厌烦了全拼的输入方式了，今天，我写篇博客，随便说一说我了解的输入法吧！ 不详细介绍输入法，只是我的一些推荐 致力于让 输入法懂我们的心意 输入法推荐废话不多说，直开始荐吧。 如果能下得去决心练习，那就直接上形码输入法。关于形码输入法自己挑选吧。 如果想更容易上手，那就双拼吧，在这里我推荐小鹤双拼。 小鹤双拼的进阶可以加上鹤形，基本能做到不用选字了。 个人经历 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我接触的输入法有全拼，双拼，五笔。很长时间以来，都是用全拼输入法，速度的话还算过得去， 但是依靠词库依旧不能摆脱选词的烦恼，可谓是苦不堪言吧！在你正畅快的输入的时候，可能眼睛还没反应过来， 文本所对应的词或句子就被你按下了空格键，等你反应过来你输入的首选上屏的文本有问题的时候你就多次按删除键， 然后一直重复着这个步骤。所以换输入法的思绪萦绕在脑海中许久，所以有了接下来五笔的学习。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;五笔输入法其实是一个让人又爱又恨的输入法，因为它需要投入的精力和一段时间内获得的收获简直不成正比，在我初学五笔输入法的时候，其实算是入门了吧，因为想打的字我大部分都能打出来，但是使用五笔却一直也没赶上我用全拼的时候。学五笔，背完了字根，记住了一级简码，二级简码，了解了拆分原则， 这确依旧不够，如果按时间来算的话，完成这些你只相当于完成了整个五笔历程的百分之一，或许是距离百分之一也相差甚远， 因为要提高速度需要您及其大量的时间去练习每个字的拆分，直到形成肌肉记忆，提高击键和形成肌肉记忆，这没有几十万字是下不来的。可想而知这是一个多么大的工作量了。 小鹤学习 小鹤官网 双拼简介： 是一种建立在拼音输入法之上的输入法，可视为全拼的改进 把拼音中的声母或韵母各自映射到某个按键上 使得每个字音都可以用最多两次按键打出 如：小：xn 鹤：he 双：ul 拼：pb 相比于全拼，少了大部分击键，能极大的提升输入速度 我目前所用的是小鹤音形（挂接搜狗输入法） 入手的话我推荐从音形直接入手。因为这样可以节省很多选字的烦恼 暂时不想学习形码的用户也可以学习小鹤纯双拼 我于此只做一个引导，具体的折腾看你们自己的了。附上小鹤官网，望自主学习。]]></content>
      <tags>
        <tag>Blog</tag>
        <tag>输入法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络系统集成]]></title>
    <url>%2F2018%2F07%2F08%2F%E7%BD%91%E7%BB%9C%E7%B3%BB%E7%BB%9F%E9%9B%86%E6%88%90%2F</url>
    <content type="text"><![CDATA[网络系统集成 网络系统集成的概念 根据用户需求将硬件设备、网络基础设施、网络设备、网络系统软件、网络基础服务系统、网络数据库及相应的应用软件等组织成能够满足设计目标、具有优良性能价格比的计算机网络系统的全过程。 目的 达到在正确时间、以正确的方式，将正确的信息传送给正确的人员，使其做出正确的处理。 原则 标准化、先进性、实用性、可靠性、可维护性、经济性和性能、安全性 内容 网络系统集成的设计 系统集成需求分析：环境分析、业务分析、管理分析 系统集成设计步骤：技术方案设计、网络拓扑结构选择、网络协议选择、网络设备选型、网络设计、网络安全设计、确定布线方案和布线产品 网络系统集成的实施 系统集成的步骤 注意事项 综合布线设计与实施设计 设计原则：兼容性、开放性、灵活性、可靠性、先进性、用户至上 设计等级：基本性综合布线系统、增强型综合布线系统、综合型综合布线系统 系统设计： 施工 网络综合布线社工要点 布线工程管理 现场调查与开工检查 工作任务分配 工作阶段报告 返工通知 下一阶段施工单 现场存料 备忘录 测试报告 制作布线标记系统 局域网组建局域网概述 LAN：范围在几十米到几千米内的办公楼群或校园内的计算机相互连接所构成的计算机网络。 分类： 按拓扑结构：总线型、环型、星型、混合型局域网 按传输介质：无线局域网、有线局域网 交换局域网（点对点通信，交换机，读点带宽）、共享局域网（广播，Hub，共享带宽） 介质访问控制方法 总线型：CSMA/CD：带冲突检测的载波侦听多路访问控制方法 原理：先听后发，边听边发，冲突停止，随机延时后重发 环形：令牌环访问控制方法，令牌总线 局域网参考模型以太网 IEEE 802.3 标准 协议 介质 802.3i 10Base-T 802.3u 100Base-T 802.3ab 1000Base-T 802.3an 10GBase-T 802.3z 1000Base-X 802.3ae 10GBase-X 虚拟局域网（VLAN） 由一些局域网网段构成的与物理位置无关的逻辑组 交换机能解决冲突域，却不能克服广播域 长度为68~1522B 无线局域网（WLAN）协议 协议 速率 频率 覆盖范围 802.11 1Mbps 2.4GHz - 802.11a 54Mbps 5GHz 10~100m 802.11b 11Mbps 2.4GHz 室内100/室外300m 802.11g 54Mbps 2.4GHz 室内30/室外100m 802.11n 300Mbps 2.4GHz和5GHz 室内70/室外250m 特点 安装便捷、维护方便 使用灵活、移动简单 易于扩展、大小自如]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[热点共享VPN]]></title>
    <url>%2F2018%2F07%2F08%2F%E7%83%AD%E7%82%B9%E5%85%B1%E4%BA%ABVPN%2F</url>
    <content type="text"><![CDATA[使用手册简介 本项目是利用电脑的或手机的WiFi热点，实现热点覆盖范围内ssr可用 SSR客户端下载 Windows客户端下载地址：https://github.com/shadowsocksrr/shadowsocksr-csharp/releases Mac客户端下载地址：https://github.com/flyzy2005/ss-ssr-clients/raw/master/ssr/SS-X-R.zip Linux客户端下载地址：https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation Android/安卓客户端下载地址：https://github.com/flyzy2005/ss-ssr-clients/raw/master/ssr/ShadowsocksR-3.4.0.8.apk 电脑WiFi共享SSR1、ShadowsocksR的设置 右键 -&gt; 设置选项 -&gt; 勾选 “允许来自局域网的连接” 2、获取电脑的IP地址 运行 -&gt; cmd -&gt; ipconfig 3、给手机等设备设置Proxy或HTTP代理 * IOS设置HTTP代理的方法： 设置 -&gt; Wi-Fi -&gt; 感叹号 -&gt; HTTP代理【手动】 -&gt; 输入电脑ip及端口 * Android设置HTTP代理的方法： Wi-Fi -&gt; 长按选择修改网络 -&gt; 代理选择手动 -&gt; 填写ip及端口 手机WiFi热点共享SSR1. Android系统 * 在谷歌商店下载 ShadowsocksR 和 HTTP注射器 * SSR中设置UDP转发 * 开启WiFi热点 * HTTP注射器右上角菜单打开中继连接 * 查看日志是否中继成功 2. IOS系统(我使用的是Shadowrocket，但一直未成功，仅供参考) * Shadowrocket -&gt; 设置 -&gt; 代理 -&gt; 代理共享 -&gt; 启用共享 * 开启热点 * 在Shadowrocket代理共享的界面，允许的ip地址中填入你接入设备的地址 * 接入设备按照上述设置HTTP代理的方法进行设置]]></content>
      <tags>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搜索引擎使用]]></title>
    <url>%2F2018%2F07%2F07%2F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[记录一些搜索引擎使用技巧 表达式 用途 实例 “”(双引号) 搜索词放在双引号中，代表完全匹配搜索 “keyword” *（通配符） 代表任何文字，比如想查找“锤*手机”，可以搜索到锤子手机，锤xx手机等 “锤*手机” +（与） 搜索所有包含关键词“keyword1”和“keyword2**”的中文网页 “keyword1 keyword2” 或者“keyword1+keyword2” -（非）(A -B) 搜索去除keyword2的keyword1 “keyword1 -keyword2” OR(或) 搜索 A 或者 B “keyword1 OR keyword2” ~keyword1 搜索它的同义词 ~喜欢 ~keyword1-keyword2 只搜索同义词,不要原词 ~WORD-WORD site: 搜索指定域名的内容 site:www.github.com keyword 或者keyword site:www.github.com filetype: 限制搜索的词语是网页中链接内包含的关键词 filetype:pdf ios开发 link: 搜索网页中含有某链接的结果,实例中的结果为包含百度这个链接的页面 link:http://baidu.com inurl: 搜索网站地址中包含关键词词的结果 inurl:搜索引擎优化 intitle 搜索标题中包含关键词词的结果 intitle:搜索引擎优化 related: 搜索相关网站 related:qidian.com intext: 限制搜索的词语是网页内文包含的关键词 index of 根据输入的内容返回一些资源列表 index of mp3 inanchor:keyword 指令返回的结果是导入链接锚文字中包含搜索词的页面 inanchor:关于我们 -filetype: -filetype:SOMEFILETYPE = 剔除指定文件类型 -filetype:SOMEFILETYPE allinanchor: 限制搜索的词语是网页中链接内包含的关键词（可使用多个关键词） allinanchor:keyword1 keyword2 allintext: 限制搜索的词语是网页内文包含的关键词（可使用多个关键词） allintext:keyword1 keyword2]]></content>
      <tags>
        <tag>搜索引擎</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello 2018]]></title>
    <url>%2F2018%2F07%2F07%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[第一篇博客就这么开始了 主要是一些随笔，记录生活，记录学习，分享技术，保留回忆。 Hexo Next 主题优化 Hexo 图片路径解决方法]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git指令]]></title>
    <url>%2F2018%2F07%2F07%2FGit%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[随便整理的一些自用的Git指令 GitHub创建仓库提示代码echo &quot;# 项目名&quot; &gt;&gt; README.md git init git add README.md git commit -m &quot;first commit&quot; git remote add origin git@github.com:qiubaiying/项目名.git git push -u origin master 若仓库存在直接push git remote add origin git@github.com:qiubaiying/test.git git push -u origin master 常用操作创建仓库（初始化）在当前指定目录下创建 git init 新建一个仓库目录 git init [project-name] 克隆一个远程项目 git clone [url] 添加文件到缓存区添加所有变化的文件 git add . 添加名称指定文件 git add text.txt 配置设置提交代码时的用户信息 git config [--global] user.name &quot;[name]&quot; git config [--global] user.email &quot;[email address]&quot; 提交提交暂存区到仓库区 git commit -m &quot;msg&quot; # 提交暂存区的指定文件到仓库区 $ git commit [file1] [file2] ... -m [message] # 提交工作区自上次commit之后的变化，直接到仓库区 $ git commit -a # 提交时显示所有diff信息 $ git commit -v # 使用一次新的commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次commit的提交信息 $ git commit --amend -m [message] # 重做上一次commit，并包括指定文件的新变化 $ git commit --amend [file1] [file2] ... 远程同步# 下载远程仓库的所有变动 $ git fetch [remote] # 显示所有远程仓库 $ git remote -v # 显示某个远程仓库的信息 $ git remote show [remote] # 增加一个新的远程仓库，并命名 $ git remote add [shortname] [url] # 取回远程仓库的变化，并与本地分支合并 $ git pull [remote] [branch] # 上传本地指定分支到远程仓库 $ git push [remote] [branch] # 强行推送当前分支到远程仓库，即使有冲突 $ git push [remote] --force # 推送所有分支到远程仓库 $ git push [remote] --all 分支# 列出所有本地分支 $ git branch # 列出所有远程分支 $ git branch -r # 列出所有本地分支和远程分支 $ git branch -a # 新建一个分支，但依然停留在当前分支 $ git branch [branch-name] # 新建一个分支，并切换到该分支 $ git checkout -b [branch] # 新建一个分支，指向指定commit $ git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系 $ git branch --track [branch] [remote-branch] # 切换到指定分支，并更新工作区 $ git checkout [branch-name] # 切换到上一个分支 $ git checkout - # 建立追踪关系，在现有分支与指定的远程分支之间 $ git branch --set-upstream [branch] [remote-branch] # 合并指定分支到当前分支 $ git merge [branch] # 选择一个commit，合并进当前分支 $ git cherry-pick [commit] # 删除分支 $ git branch -d [branch-name] # 删除远程分支 $ git push origin --delete [branch-name] $ git branch -dr [remote/branch] 标签Tags添加标签 在当前commit git tag -a v1.0 -m &apos;xxx&apos; 添加标签 在指定commit git tag v1.0 [commit] 查看 git tag 删除 git tag -d V1.0 删除远程tag git push origin :refs/tags/[tagName] 推送 git push origin --tags 拉取 git fetch origin tag V1.0 新建一个分支，指向某个tag git checkout -b [branch] [tag] 查看信息# 显示有变更的文件 $ git status # 显示当前分支的版本历史 $ git log # 显示commit历史，以及每次commit发生变更的文件 $ git log --stat # 搜索提交历史，根据关键词 $ git log -S [keyword] # 显示某个commit之后的所有变动，每个commit占据一行 $ git log [tag] HEAD --pretty=format:%s # 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件 $ git log [tag] HEAD --grep feature # 显示某个文件的版本历史，包括文件改名 $ git log --follow [file] $ git whatchanged [file] # 显示指定文件相关的每一次diff $ git log -p [file] # 显示过去5次提交 $ git log -5 --pretty --oneline # 显示所有提交过的用户，按提交次数排序 $ git shortlog -sn # 显示指定文件是什么人在什么时间修改过 $ git blame [file] # 显示暂存区和工作区的差异 $ git diff # 显示暂存区和上一个commit的差异 $ git diff --cached [file] # 显示工作区与当前分支最新commit之间的差异 $ git diff HEAD # 显示两次提交之间的差异 $ git diff [first-branch]...[second-branch] # 显示今天你写了多少行代码 $ git diff --shortstat &quot;@{0 day ago}&quot; # 显示某次提交的元数据和内容变化 $ git show [commit] # 显示某次提交发生变化的文件 $ git show --name-only [commit] # 显示某次提交时，某个文件的内容 $ git show [commit]:[filename] # 显示当前分支的最近几次提交 $ git reflog 撤销# 恢复暂存区的指定文件到工作区 $ git checkout [file] # 恢复某个commit的指定文件到暂存区和工作区 $ git checkout [commit] [file] # 恢复暂存区的所有文件到工作区 $ git checkout . # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 $ git reset [file] # 重置暂存区与工作区，与上一次commit保持一致 $ git reset --hard # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 $ git reset [commit] # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 $ git reset --hard [commit] # 重置当前HEAD为指定commit，但保持暂存区和工作区不变 $ git reset --keep [commit] # 新建一个commit，用来撤销指定commit # 后者的所有变化都将被前者抵消，并且应用到当前分支 $ git revert [commit] # 暂时将未提交的变化移除，稍后再移入 $ git stash $ git stash pop 其他# 生成一个可供发布的压缩包 $ git archives]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速搭建个人博客]]></title>
    <url>%2F2018%2F07%2F07%2F%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言 以前想按照BY的博客搭建，发现作为小白的我总是出错，所以还是回归了原始。 推荐博客搭建教程 参考了许多 GitHub Pages + Hexo 的文档和视频，终于把我的个人博客Ding’s Blog搭建出来了。。。 本教程针对的是不懂技术又想搭建个人博客的小白，操作简单暴力且快速。当然懂技术那就更好了。 废话不多说了，开始进入正文。 快速开始拥有一个Github账号我采用的搭建博客的方式是使用 GitHub Pages + Hexo 的方式。 要使用 GitHub Pages，首先你要注册一个GitHub账号。 新建一个GitHub仓库新建仓库的要求： 用户名.github.io我的仓库名：dgz19971210.github.io 下载安装 Node.js 和 Hexo1、百度下载安装 Node.js2、安装好Node.js后，用命令安装Hexo1npm install -g hexo-cli 初始化Hexo1、创建文件夹，我的文件夹在(D:\Blog)2、命令提示符进入Blog文件夹，输入命令：hexo init3、在_config.yml,进行基础配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# Hexo 详细配置## Docs: http://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site #站点信息title: #标题subtitle: #副标题description: #站点描述，给搜索引擎看的author: #作者email: #电子邮箱language: zh-CN #语言# URL #链接格式url: #网址root: / #根目录permalink: :year/:month/:day/:title/ #文章的链接格式tag_dir: tags #标签目录archive_dir: archives #存档目录category_dir: categories #分类目录code_dir: downloads/codepermalink_defaults:# Directory #目录source_dir: source #源文件目录public_dir: public #生成的网页文件目录# Writing #写作new_post_name: :title.md #新文章标题default_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）titlecase: false #标题转换成大写external_link: true #在新选项卡中打开连接filename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsehighlight: #语法高亮 enable: true #是否启用 line_number: true #显示行号 tab_replace:# Category &amp; Tag #分类和标签default_category: uncategorized #默认分类category_map:tag_map:# Archives2: 开启分页1: 禁用分页0: 全部禁用archive: 2category: 2tag: 2# Server #本地服务器port: 4000 #端口号server_ip: localhost #IP 地址logger: falselogger_format: dev# Date / Time format #日期时间格式date_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/time_format: H:mm:ss# Pagination #分页per_page: 10 #每页文章数，设置成 0 禁用分页pagination_dir: page# Disqus #Disqus评论，替换为多说disqus_shortname:# Extensions #拓展插件theme: landscape-plus #主题exclude_generator:plugins: #插件，例如生成 RSS 和站点地图的- hexo-generator-feed- hexo-generator-sitemap# Deployment #部署，将 lmintlcx 改成用户名deploy: type: git repo: https://github.com/dgz19971210/dgzd19971210.github.io.git branch: master 4、启动服务，调试页面12345# 启动本地服务器$ hexo server# 在浏览器输入 http://localhost:4000/INFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 5、修改主题我用的主题：Anisina主题下载：命令提示符到你init的blog文件夹下，输入命令1git clone https://github.com/Haojen/hexo-theme-Anisina.git themes/Anisina 更多主题：https://hexo.io/themes/ Hexo基本命令 12345hexo clean #清除缓存文件 (db.json) 和已生成的静态文件 (public)。hexo g #完整命令为hexo generate,用于生成静态文件hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览hexo d #完整命令为hexo deploy,用于将本地文件发布到github等git仓库上hexo n &quot;article name&quot; #完整命令为hexo new,用于新建一篇文章 推送到GitHub Page GitHub配置 建好与用户名相同的仓库，例如我的仓库为： dgz19971210.github.io 配置好_config.yml 1234deploy: type: git repo: https://github.com/dgz19971210/dgzd19971210.github.io.git branch: master 安装 hexo-deployer-git 自动部署发布工具 1npm install hexo-deployer-git --save 推送到GitHub cmd中到blog下输入命令，第一次发布需要验证GitHub账号 1hexo clean|hexo d -g 访问dgz19971210.github.io，查看是否成功 发布文章格式123456789101112---layout: posttitle: # 标题subtitle: # 副标题date: #日期author: Ding|轻尘header-img: # 背景图catalog: true #categories: #目录分类tags: # 标签 - Blog--- GitHub Page绑定域名 在此不详细赘述，这是简略记录以下我部署的过程，其他相关请自行搜索 在source文件夹下建立CANME文件 域名解析：域名管理后台填入 A类GitHub的ip 和 CNAME 对应的 用户名.github.io 部署到GitHub]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
